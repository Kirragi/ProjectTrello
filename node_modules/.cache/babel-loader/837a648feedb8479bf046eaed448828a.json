{"ast":null,"code":"var _jsxFileName = \"/Users/Kirragi/Desktop/trello/src/components/NamePopup/NamePopup.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, WrapperPopup, ContentPopup, YourName, InputName, Flex, Name } from './nameStyling';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction NamePopup(props) {\n  _s();\n\n  const [newNeme, setNewNeme] = useState('');\n\n  function onThemeNewCards(e) {\n    setNewNeme(e.currentTarget.value);\n  }\n\n  function onSubmit(e) {\n    e.preventDefault();\n    props.setName([{\n      status: false,\n      name: newNeme\n    }]);\n    localStorage.setItem('name', JSON.stringify([{\n      status: false,\n      name: newNeme\n    }]));\n  }\n\n  let popup;\n\n  if (props.name[0].status === true) {\n    popup = /*#__PURE__*/_jsxDEV(WrapperPopup, {\n      children: /*#__PURE__*/_jsxDEV(ContentPopup, {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: onSubmit,\n          children: [/*#__PURE__*/_jsxDEV(YourName, {\n            children: \"\\u041A\\u0430\\u043A \\u0432\\u0430\\u0441 \\u0437\\u043E\\u0432\\u0443\\u0442?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Flex, {\n            children: [/*#__PURE__*/_jsxDEV(InputName, {\n              type: \"text\",\n              onChange: onThemeNewCards\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              children: \"\\u0413\\u043E\\u0442\\u043E\\u0432\\u043E\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  } else {\n    popup = /*#__PURE__*/_jsxDEV(Name, {\n      children: props.name[0].name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", popup]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NamePopup, \"EH1zttUSjYJcM+5Y2RaMEhZXyvY=\");\n\n_c = NamePopup;\nexport default NamePopup;\n\nvar _c;\n\n$RefreshReg$(_c, \"NamePopup\");","map":{"version":3,"sources":["/Users/Kirragi/Desktop/trello/src/components/NamePopup/NamePopup.tsx"],"names":["React","useState","Button","WrapperPopup","ContentPopup","YourName","InputName","Flex","Name","NamePopup","props","newNeme","setNewNeme","onThemeNewCards","e","currentTarget","value","onSubmit","preventDefault","setName","status","name","localStorage","setItem","JSON","stringify","popup"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SACEC,MADF,EAEEC,YAFF,EAGEC,YAHF,EAIEC,QAJF,EAKEC,SALF,EAMEC,IANF,EAOEC,IAPF,QAQO,eARP;;;AAUA,SAASC,SAAT,CAAmBC,KAAnB,EAAqC;AAAA;;AACnC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;;AAEA,WAASY,eAAT,CAAyBC,CAAzB,EAAqE;AACnEF,IAAAA,UAAU,CAACE,CAAC,CAACC,aAAF,CAAgBC,KAAjB,CAAV;AACD;;AAED,WAASC,QAAT,CAAkBH,CAAlB,EAAsC;AACpCA,IAAAA,CAAC,CAACI,cAAF;AACAR,IAAAA,KAAK,CAACS,OAAN,CAAc,CAAC;AAAEC,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,IAAI,EAAEV;AAAvB,KAAD,CAAd;AACAW,IAAAA,YAAY,CAACC,OAAb,CACE,MADF,EAEEC,IAAI,CAACC,SAAL,CAAe,CAAC;AAAEL,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,IAAI,EAAEV;AAAvB,KAAD,CAAf,CAFF;AAID;;AAED,MAAIe,KAAJ;;AACA,MAAIhB,KAAK,CAACW,IAAN,CAAW,CAAX,EAAcD,MAAd,KAAyB,IAA7B,EAAmC;AACjCM,IAAAA,KAAK,gBACH,QAAC,YAAD;AAAA,6BACE,QAAC,YAAD;AAAA,+BACE;AAAM,UAAA,QAAQ,EAAET,QAAhB;AAAA,kCACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD;AAAA,oCACE,QAAC,SAAD;AAAW,cAAA,IAAI,EAAC,MAAhB;AAAuB,cAAA,QAAQ,EAAEJ;AAAjC;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAaD,GAdD,MAcO;AACLa,IAAAA,KAAK,gBAAG,QAAC,IAAD;AAAA,gBAAOhB,KAAK,CAACW,IAAN,CAAW,CAAX,EAAcA;AAArB;AAAA;AAAA;AAAA;AAAA,YAAR;AACD;;AAED,sBACE;AAAA,2BACE;AAAA,sBAAOK,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAxCQjB,S;;KAAAA,S;AAyCT,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport { NameProps } from '../App/entity';\nimport {\n  Button,\n  WrapperPopup,\n  ContentPopup,\n  YourName,\n  InputName,\n  Flex,\n  Name,\n} from './nameStyling';\n\nfunction NamePopup(props: NameProps) {\n  const [newNeme, setNewNeme] = useState('');\n\n  function onThemeNewCards(e: React.FormEvent<HTMLInputElement>): void {\n    setNewNeme(e.currentTarget.value);\n  }\n\n  function onSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    props.setName([{ status: false, name: newNeme }]);\n    localStorage.setItem(\n      'name',\n      JSON.stringify([{ status: false, name: newNeme }]),\n    );\n  }\n\n  let popup: JSX.Element;\n  if (props.name[0].status === true) {\n    popup = (\n      <WrapperPopup>\n        <ContentPopup>\n          <form onSubmit={onSubmit}>\n            <YourName>Как вас зовут?</YourName>\n            <Flex>\n              <InputName type=\"text\" onChange={onThemeNewCards} />\n              <Button>Готово</Button>\n            </Flex>\n          </form>\n        </ContentPopup>\n      </WrapperPopup>\n    );\n  } else {\n    popup = <Name>{props.name[0].name}</Name>;\n  }\n\n  return (\n    <div>\n      <div> {popup}</div>\n    </div>\n  );\n}\nexport default NamePopup;\n"]},"metadata":{},"sourceType":"module"}