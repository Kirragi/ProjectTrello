{"ast":null,"code":"var _jsxFileName = \"/Users/Kirragi/Desktop/trello/src/components/Comment/Comment.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport trashIcon from '../assets/img/trash.png';\nimport ChengeIcon from '../assets/img/ChengeIcon.png';\nimport { ImgTheme, ImgText, ButtonChenge, InputComment, ButtonComment, CommentWrapper, ButtonTrash, CommentHeader } from './commentStyling';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Comment(props) {\n  _s();\n\n  const [valueComment, setValueComment] = useState('');\n  const [chenge, setChenge] = useState(false);\n\n  function onValueComment(e) {\n    setValueComment(e.currentTarget.value);\n  }\n\n  function newText() {\n    props.newTextComment(valueComment, props.comment.idComents);\n    setChenge(false);\n  }\n\n  let statusComment;\n\n  if (chenge === false) {\n    statusComment = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: props.comment.coment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonChenge, {\n        onClick: () => setChenge(true),\n        children: /*#__PURE__*/_jsxDEV(ImgText, {\n          src: ChengeIcon,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  } else {\n    statusComment = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(InputComment, {\n        type: \"text\",\n        defaultValue: props.comment.coment,\n        onChange: onValueComment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonComment, {\n        onClick: () => newText(),\n        children: \"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CommentWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(CommentHeader, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0410\\u0432\\u0442\\u043E\\u0440: \", props.comment.authorComents]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonTrash, {\n        onClick: () => props.onDeleteCommets(props.comment.idComents),\n        children: /*#__PURE__*/_jsxDEV(ImgTheme, {\n          src: trashIcon,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), statusComment]\n  }, props.comment.idComents, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Comment, \"pTSrA/OrlJy707qpJhwQz9RiKw0=\");\n\n_c = Comment;\nexport default Comment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comment\");","map":{"version":3,"sources":["/Users/Kirragi/Desktop/trello/src/components/Comment/Comment.tsx"],"names":["React","useState","trashIcon","ChengeIcon","ImgTheme","ImgText","ButtonChenge","InputComment","ButtonComment","CommentWrapper","ButtonTrash","CommentHeader","Comment","props","valueComment","setValueComment","chenge","setChenge","onValueComment","e","currentTarget","value","newText","newTextComment","comment","idComents","statusComment","coment","authorComents","onDeleteCommets"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AAEA,SACEC,QADF,EAEEC,OAFF,EAGEC,YAHF,EAIEC,YAJF,EAKEC,aALF,EAMEC,cANF,EAOEC,WAPF,EAQEC,aARF,QASO,kBATP;;;AAUA,SAASC,OAAT,CAAiBC,KAAjB,EAKG;AAAA;;AACD,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACe,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC,KAAD,CAApC;;AACA,WAASiB,cAAT,CAAwBC,CAAxB,EAAoE;AAClEJ,IAAAA,eAAe,CAACI,CAAC,CAACC,aAAF,CAAgBC,KAAjB,CAAf;AACD;;AACD,WAASC,OAAT,GAAmB;AACjBT,IAAAA,KAAK,CAACU,cAAN,CAAqBT,YAArB,EAAmCD,KAAK,CAACW,OAAN,CAAcC,SAAjD;AACAR,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD;;AACD,MAAIS,aAAJ;;AACA,MAAIV,MAAM,KAAK,KAAf,EAAsB;AACpBU,IAAAA,aAAa,gBACX;AAAA,8BACE;AAAA,kBAAOb,KAAK,CAACW,OAAN,CAAcG;AAArB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,YAAD;AAAc,QAAA,OAAO,EAAE,MAAMV,SAAS,CAAC,IAAD,CAAtC;AAAA,+BACE,QAAC,OAAD;AAAS,UAAA,GAAG,EAAEd,UAAd;AAA0B,UAAA,GAAG,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD,GATD,MASO;AACLuB,IAAAA,aAAa,gBACX;AAAA,8BACE,QAAC,YAAD;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,YAAY,EAAEb,KAAK,CAACW,OAAN,CAAcG,MAF9B;AAGE,QAAA,QAAQ,EAAET;AAHZ;AAAA;AAAA;AAAA;AAAA,cADF,eAME,QAAC,aAAD;AAAe,QAAA,OAAO,EAAE,MAAMI,OAAO,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AACD,sBACE,QAAC,cAAD;AAAA,4BACE,QAAC,aAAD;AAAA,8BACE;AAAA,uDAAWT,KAAK,CAACW,OAAN,CAAcI,aAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,WAAD;AACE,QAAA,OAAO,EAAE,MAAMf,KAAK,CAACgB,eAAN,CAAsBhB,KAAK,CAACW,OAAN,CAAcC,SAApC,CADjB;AAAA,+BAEE,QAAC,QAAD;AAAU,UAAA,GAAG,EAAEvB,SAAf;AAA0B,UAAA,GAAG,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAQGwB,aARH;AAAA,KAAqBb,KAAK,CAACW,OAAN,CAAcC,SAAnC;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GAjDQb,O;;KAAAA,O;AAkDT,eAAeA,OAAf","sourcesContent":["import React, { useState } from 'react';\nimport trashIcon from '../assets/img/trash.png';\nimport ChengeIcon from '../assets/img/ChengeIcon.png';\nimport { CommentType } from '../app/entity';\nimport {\n  ImgTheme,\n  ImgText,\n  ButtonChenge,\n  InputComment,\n  ButtonComment,\n  CommentWrapper,\n  ButtonTrash,\n  CommentHeader,\n} from './commentStyling';\nfunction Comment(props: {\n  comment: CommentType;\n  newTextComment(text: string, id: number): void;\n  onDeleteCommets(id: number): void;\n  idCommentChenge: number;\n}) {\n  const [valueComment, setValueComment] = useState('');\n  const [chenge, setChenge] = useState(false);\n  function onValueComment(e: React.FormEvent<HTMLInputElement>): void {\n    setValueComment(e.currentTarget.value);\n  }\n  function newText() {\n    props.newTextComment(valueComment, props.comment.idComents);\n    setChenge(false);\n  }\n  let statusComment: JSX.Element;\n  if (chenge === false) {\n    statusComment = (\n      <div>\n        <span>{props.comment.coment}</span>\n        <ButtonChenge onClick={() => setChenge(true)}>\n          <ImgText src={ChengeIcon} alt=\"\" />\n        </ButtonChenge>\n      </div>\n    );\n  } else {\n    statusComment = (\n      <div>\n        <InputComment\n          type=\"text\"\n          defaultValue={props.comment.coment}\n          onChange={onValueComment}\n        />\n        <ButtonComment onClick={() => newText()}>Изменить</ButtonComment>\n      </div>\n    );\n  }\n  return (\n    <CommentWrapper key={props.comment.idComents}>\n      <CommentHeader>\n        <p>Автор: {props.comment.authorComents}</p>\n        <ButtonTrash\n          onClick={() => props.onDeleteCommets(props.comment.idComents)}>\n          <ImgTheme src={trashIcon} alt=\"\" />\n        </ButtonTrash>\n      </CommentHeader>\n      {statusComment}\n    </CommentWrapper>\n  );\n}\nexport default Comment;\n"]},"metadata":{},"sourceType":"module"}